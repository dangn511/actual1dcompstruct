/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg avr_rx,
    input avr_rx_busy,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input cclk,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input sum,
    input cout
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam BEGIN_state = 4'd0;
  localparam IDLE_state = 4'd1;
  localparam TESTCASE1_state = 4'd2;
  localparam TESTCASE2_state = 4'd3;
  localparam TESTCASE3_state = 4'd4;
  localparam TESTCASE4_state = 4'd5;
  localparam TESTCASE5_state = 4'd6;
  localparam TESTCASE6_state = 4'd7;
  localparam TESTCASE7_state = 4'd8;
  localparam TESTCASE8_state = 4'd9;
  localparam TESTCASE9_state = 4'd10;
  localparam TESTCASE10_state = 4'd11;
  
  reg [3:0] M_state_d, M_state_q = BEGIN_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [1-1:0] M_sc_inc_state1;
  wire [1-1:0] M_sc_inc_state2;
  wire [1-1:0] M_sc_inc_state3;
  stateCounter_3 sc (
    .clk(clk),
    .rst(rst),
    .inc_state1(M_sc_inc_state1),
    .inc_state2(M_sc_inc_state2),
    .inc_state3(M_sc_inc_state3)
  );
  reg [7:0] M_val_d, M_val_q = 1'h0;
  wire [16-1:0] M_rng_num;
  random_gen_4 rng (
    .clk(clk),
    .num(M_rng_num)
  );
  
  reg [15:0] a;
  
  reg [7:0] b;
  
  reg [0:0] myCounter;
  
  always @* begin
    M_state_d = M_state_q;
    M_val_d = M_val_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    a = 16'h0800;
    b = 8'h00;
    io_led[8+15-:16] = {{a[8+7-:8]}, {a[0+7-:8]}};
    io_led[0+7-:8] = M_val_q[0+7-:8];
    M_val_d = 1'h0;
    if (io_dip[0+0+0-:1] == 1'h0 && io_dip[0+1+0-:1] == 1'h0) begin
      myCounter = M_sc_inc_state1;
    end else begin
      if (io_dip[0+0+0-:1] == 1'h0 && io_dip[0+1+0-:1] == 1'h1) begin
        myCounter = M_sc_inc_state2;
      end else begin
        if (io_dip[0+0+0-:1] == 1'h1 && io_dip[0+1+0-:1] == 1'h1) begin
          myCounter = M_sc_inc_state3;
        end else begin
          myCounter = M_sc_inc_state2;
        end
      end
    end
    
    case (M_state_q)
      BEGIN_state: begin
        if (io_button[1+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
      IDLE_state: begin
        a = 16'h0400;
        if (M_rng_num < 16'h0001) begin
          M_state_d = TESTCASE1_state;
        end else begin
          M_state_d = IDLE_state;
        end
      end
      TESTCASE1_state: begin
        a = 16'h0001;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE2_state;
        end
        if (rst_n == 1'h0) begin
          M_state_d = IDLE_state;
        end
      end
      TESTCASE2_state: begin
        a = 16'h0002;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE3_state;
        end
      end
      TESTCASE3_state: begin
        a = 16'h0004;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE4_state;
        end
      end
      TESTCASE4_state: begin
        a = 16'h0008;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE5_state;
        end
      end
      TESTCASE5_state: begin
        a = 16'h0010;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE6_state;
        end
      end
      TESTCASE6_state: begin
        a = 16'h0020;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE7_state;
        end
      end
      TESTCASE7_state: begin
        a = 16'h0040;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE8_state;
        end
      end
      TESTCASE8_state: begin
        a = 16'h0080;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE9_state;
        end
      end
      TESTCASE9_state: begin
        a = 16'h0100;
        if (myCounter == 1'h1) begin
          M_state_d = TESTCASE10_state;
        end
      end
      TESTCASE10_state: begin
        a = 16'h0200;
        b = b + 1'h1;
        M_val_d = M_val_q + 1'h1;
        if (myCounter == 1'h1) begin
          M_state_d = BEGIN_state;
        end
      end
    endcase
    io_led[8+15-:16] = {{a[8+7-:8]}, {a[0+7-:8]}};
    io_led[0+7-:8] = {M_val_q[0+7-:8]};
  end
  
  always @(posedge clk) begin
    M_val_q <= M_val_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
